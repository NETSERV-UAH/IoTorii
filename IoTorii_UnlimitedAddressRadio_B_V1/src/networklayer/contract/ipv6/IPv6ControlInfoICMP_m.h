//
// Generated file, do not edit! Created by nedtool 5.2 from src/networklayer/contract/ipv6/IPv6ControlInfoICMP.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_IPV6CONTROLINFOICMP_M_H
#define __INET_IPV6CONTROLINFOICMP_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/networklayer/contract/ipv6/IPv6ControlInfo.h"
#include "inet/linklayer/common/MACAddress.h"
// }}


namespace inet {

// cplusplus {{
class IPv6ControlInfo;
// }}

/**
 * Class generated from <tt>src/networklayer/contract/ipv6/IPv6ControlInfoICMP.msg:42</tt> by nedtool.
 * <pre>
 * //
 * // Control information for sending/receiving unicast icmp NA packets over IPv6.
 * //
 * //
 * class IPv6ControlInfoICMP extends IPv6ControlInfo
 * {
 *     MACAddress srcMacAddress;
 * }
 * </pre>
 */
class IPv6ControlInfoICMP : public ::inet::IPv6ControlInfo
{
  protected:
    MACAddress srcMacAddress;

  private:
    void copy(const IPv6ControlInfoICMP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPv6ControlInfoICMP&);

  public:
    IPv6ControlInfoICMP();
    IPv6ControlInfoICMP(const IPv6ControlInfoICMP& other);
    virtual ~IPv6ControlInfoICMP();
    IPv6ControlInfoICMP& operator=(const IPv6ControlInfoICMP& other);
    virtual IPv6ControlInfoICMP *dup() const override {return new IPv6ControlInfoICMP(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual MACAddress& getSrcMacAddress();
    virtual const MACAddress& getSrcMacAddress() const {return const_cast<IPv6ControlInfoICMP*>(this)->getSrcMacAddress();}
    virtual void setSrcMacAddress(const MACAddress& srcMacAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IPv6ControlInfoICMP& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IPv6ControlInfoICMP& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_IPV6CONTROLINFOICMP_M_H

