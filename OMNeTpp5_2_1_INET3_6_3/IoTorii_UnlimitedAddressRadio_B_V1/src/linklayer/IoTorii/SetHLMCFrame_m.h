//
// Generated file, do not edit! Created by nedtool 5.2 from src/linklayer/IoTorii/SetHLMCFrame.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __IOTORII_SETHLMCFRAME_M_H
#define __IOTORII_SETHLMCFRAME_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
    #include "inet/linklayer/common/MACAddress.h"
    #include "src/linklayer/common/HLMACAddress.h"

   typedef struct {
       inet::MACAddress MAC;
       unsigned int suffix;
   } TargetOption;
    
    
// }}


namespace iotorii {

/**
 * Class generated from <tt>src/linklayer/IoTorii/SetHLMCFrame.msg:41</tt> by nedtool.
 * <pre>
 * packet SetHLMACFrame
 * {
 *     HLMACAddress prefix;
 *     TargetOption targetOptions[];
 * }
 * </pre>
 */
class SetHLMACFrame : public ::omnetpp::cPacket
{
  protected:
    HLMACAddress prefix;
    TargetOption *targetOptions; // array ptr
    unsigned int targetOptions_arraysize;

  private:
    void copy(const SetHLMACFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SetHLMACFrame&);

  public:
    SetHLMACFrame(const char *name=nullptr, short kind=0);
    SetHLMACFrame(const SetHLMACFrame& other);
    virtual ~SetHLMACFrame();
    SetHLMACFrame& operator=(const SetHLMACFrame& other);
    virtual SetHLMACFrame *dup() const override {return new SetHLMACFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual HLMACAddress& getPrefix();
    virtual const HLMACAddress& getPrefix() const {return const_cast<SetHLMACFrame*>(this)->getPrefix();}
    virtual void setPrefix(const HLMACAddress& prefix);
    virtual void setTargetOptionsArraySize(unsigned int size);
    virtual unsigned int getTargetOptionsArraySize() const;
    virtual TargetOption& getTargetOptions(unsigned int k);
    virtual const TargetOption& getTargetOptions(unsigned int k) const {return const_cast<SetHLMACFrame*>(this)->getTargetOptions(k);}
    virtual void setTargetOptions(unsigned int k, const TargetOption& targetOptions);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SetHLMACFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SetHLMACFrame& obj) {obj.parsimUnpack(b);}

} // namespace iotorii

#endif // ifndef __IOTORII_SETHLMCFRAME_M_H

