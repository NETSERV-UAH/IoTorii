//
// Copyright (C) 03/2012 Elisa Rojas
//
//
// Copyright (C) 2018 Elisa Rojas(1), Hedayat Hosseini(2);
//                    (1) GIST, University of Alcala, Spain.
//                    (2) CEIT, Amirkabir University of Technology (Tehran Polytechnic), Iran.
//                    INET 3.6.3 adaptation, also adapted for using in the wARP-PATH protocol  
//
// Copyright (C) 2018 Elisa Rojas(1), Hedayat Hosseini(2);
//                    (1) GIST, University of Alcala, Spain.
//                    (2) CEIT, Amirkabir University of Technology (Tehran Polytechnic), Iran.
//                    INET 3.6.3 adaptation, also adapted for using in the IoTorii(WSN) protocol
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//

package iotorii.src.simulationmodels.flowmodels;

// This module is an UDP flow traffic generator. You can configure a generation frequency (lambda) and 
// this will determine every time a new flow is created by the generator. The generator operates
// with the UDPFlowHost modules at every host (StandardHostNew) in the network. Every time a new 
// flow is created, the generator indicates the source host to start the flow (and its parameters)

simple UDPFlowGenerator
{
    parameters:
        @class(iotorii::UDPFlowGenerator);
        double startTime @unit("s") = default(3s); // time first generation begins		
        double stopTime @unit("s") = default(10000s); //time to stop generating traffic
        string trafficType = default("Upward"); //type of traffic generated by this module: S_DATA (bit rate 25.6 Kb/p, packet size 64 Bytes), VOICE (bitrate 64 Kb/p, packet size 160 Byte), CUSTOMIZED (bitrte is same as S_DATA, and packet size are user defined)
        int frameSize @unit(Byte)= default(112 B); // the mtu of ieee802.15.4 is 127 B, header length is 9 B, udp and ipv6 header length according to 6LoWPAN are 4 and 2 B respectively. Therfore, data payload without need to fragmentation is 112 Bytes.
        int numSessions = default(10); //number of sessions in simulation
        double interval @unit("s") = default(0.02s); //volatile double interval= uniform(0s, 0.02s); //interval between two sequential packets of each session
        volatile double sessionStartTime @unit("s") = uniform(startTime, 4s); //absolute time, not relative time
        string excludedAddresses = default(""); // list of \IP addresses, separated by spaces, to be excluded from the traffic generation (both as source and destination)
        string hostsWeights = default(""); // list of \IP addresses and their weights (!=1 which is the default value), all separated by spaces
        string routeHosts = default(""); // list of couples of \IP addresses (src/dst), separated by spaces, to have their routes registered by the ARP
        string routeSwitches = default(""); //list of couples of switches (src/dst), separated by spaces, to have their routes (of the hosts they are serving) registered by the ARP
        @display("i=block/cogwheel_s");
        @labels(node);
}
